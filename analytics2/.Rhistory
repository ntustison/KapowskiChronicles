geom_boxplot( aes( fill = specialty ), notch = FALSE ) +
geom_text( data = data.frame(), aes( 1, 3.25, label = "mu" ), size = 4, parse = TRUE ) +
geom_text( data = data.frame(), aes( 2, 3.25, label = "0.75" ), size = 4 ) +
geom_text( data = data.frame(), aes( 3, 3.25, label = "0.66" ), size = 4 ) +
geom_text( data = data.frame(), aes( 4, 3.25, label = "0.47" ), size = 4 )
ggsave( filename = paste( "~/Desktop/kimLarcBoxPlot.pdf", sep = "" ),
plot = larcDistributionPlot, width = 6, height = 4, units = 'in' )
boxPlotData <- data.frame( specialty = kimData$specialty[which( !is.na( kimData$specialty ) )],
LARCScore = kimData$LARCScore[which( !is.na( kimData$specialty ) )] )
larcDistributionPlot <- ggplot( data = boxPlotData, aes( x = specialty, y = LARCScore) ) +
scale_y_continuous( "LARC Score" ) +
scale_x_discrete( "Specialty" ) +
theme( legend.position = "none" ) +
geom_boxplot( aes( fill = specialty ), notch = FALSE ) +
geom_text( data = data.frame(), aes( 1, 3.25, label = "mu = 1.07" ), size = 4, parse = TRUE ) +
geom_text( data = data.frame(), aes( 2, 3.25, label = "0.75" ), size = 4 ) +
geom_text( data = data.frame(), aes( 3, 3.25, label = "0.66" ), size = 4 ) +
geom_text( data = data.frame(), aes( 4, 3.25, label = "0.47" ), size = 4 )
ggsave( filename = paste( "~/Desktop/kimLarcBoxPlot.pdf", sep = "" ),
plot = larcDistributionPlot, width = 6, height = 4, units = 'in' )
boxPlotData <- data.frame( specialty = kimData$specialty[which( !is.na( kimData$specialty ) )],
LARCScore = kimData$LARCScore[which( !is.na( kimData$specialty ) )] )
larcDistributionPlot <- ggplot( data = boxPlotData, aes( x = specialty, y = LARCScore) ) +
scale_y_continuous( "LARC Score" ) +
scale_x_discrete( "Specialty" ) +
theme( legend.position = "none" ) +
geom_boxplot( aes( fill = specialty ), notch = FALSE ) +
geom_text( data = data.frame(), aes( 1, 3.25, label = "mu" ), size = 4 ) +
geom_text( data = data.frame(), aes( 2, 3.25, label = "0.75" ), size = 4 ) +
geom_text( data = data.frame(), aes( 3, 3.25, label = "0.66" ), size = 4 ) +
geom_text( data = data.frame(), aes( 4, 3.25, label = "0.47" ), size = 4 )
ggsave( filename = paste( "~/Desktop/kimLarcBoxPlot.pdf", sep = "" ),
plot = larcDistributionPlot, width = 6, height = 4, units = 'in' )
boxPlotData <- data.frame( specialty = kimData$specialty[which( !is.na( kimData$specialty ) )],
LARCScore = kimData$LARCScore[which( !is.na( kimData$specialty ) )] )
larcDistributionPlot <- ggplot( data = boxPlotData, aes( x = specialty, y = LARCScore) ) +
scale_y_continuous( "LARC Score" ) +
scale_x_discrete( "Specialty" ) +
theme( legend.position = "none" ) +
geom_boxplot( aes( fill = specialty ), notch = FALSE ) +
geom_text( data = data.frame(), aes( 1, 3.25, label = "1.07" ), size = 4 ) +
geom_text( data = data.frame(), aes( 2, 3.25, label = "0.75" ), size = 4 ) +
geom_text( data = data.frame(), aes( 3, 3.25, label = "0.66" ), size = 4 ) +
geom_text( data = data.frame(), aes( 4, 3.25, label = "0.47" ), size = 4 )
ggsave( filename = paste( "~/Desktop/kimLarcBoxPlot.pdf", sep = "" ),
plot = larcDistributionPlot, width = 6, height = 4, units = 'in' )
myTtest <- ( t.test( kimData$LARCScore[which( kimData$specialty == 'GY' )], kimData$LARCScore[which( kimData$specialty != 'GY' )], alternative = 'two.sided' ) )
myTtest
boxPlotData <- data.frame( specialty = kimData$specialty[which( !is.na( kimData$specialty ) )],
LARCScore = kimData$LARCScore[which( !is.na( kimData$specialty ) )] )
larcDistributionPlot <- ggplot( data = boxPlotData, aes( x = specialty, y = LARCScore) ) +
scale_y_continuous( "LARC Score" ) +
scale_x_discrete( "Specialty" ) +
theme( legend.position = "none" ) +
geom_boxplot( aes( fill = specialty ), notch = FALSE ) +
geom_text( data = data.frame(), aes( 1, 3.25, label = "1.07" ), size = 4 ) +
geom_text( data = data.frame(), aes( 2, 3.25, label = "0.75*" ), size = 4 ) +
geom_text( data = data.frame(), aes( 3, 3.25, label = "0.66*" ), size = 4 ) +
geom_text( data = data.frame(), aes( 4, 3.25, label = "0.47*" ), size = 4 )
ggsave( filename = paste( "~/Desktop/kimLarcBoxPlot.pdf", sep = "" ),
plot = larcDistributionPlot, width = 6, height = 4, units = 'in' )
myTtest <- ( t.test( kimData$LARCScore[which( kimData$specialty == 'GY' )], kimData$LARCScore[which( kimData$specialty == 'FM' )], alternative = 'two.sided' ) )
myTtest
myTtest <- ( t.test( kimData$LARCScore[which( kimData$specialty == 'GY' )], kimData$LARCScore[which( kimData$specialty == 'P' )], alternative = 'two.sided' ) )
myTtest
myTtest <- ( t.test( kimData$LARCScore[which( kimData$specialty == 'GY' )], kimData$LARCScore[which( kimData$specialty == 'IM' )], alternative = 'two.sided' ) )
myTtest
myTtest <- ( t.test( kimData$LARCScore[which( kimData$specialty == 'GY' )], kimData$LARCScore[which( kimData$specialty != 'GY' )], alternative = 'two.sided' ) )
myTtest
setwd( "~/Documents/Academic/InProgress/")
setwd( "KapowskiChronicles/")
setwd( "analytics2/")
source( "ageThicknessPlots.R")
source( "ageThicknessPlots.R")
resultsCombined$SITE
source( "ageThicknessPlots.R")
source( "ageThicknessPlots.R")
source( "ageThicknessPlots.R")
source( "ageThicknessPlots.R")
source( "ageThicknessPlots.R")
plotData
source( "ageThicknessPlots.R")
source( "ageThicknessPlots.R")
resultsCombined$SITE
site <- cut( resultsCombined$SITE, breaks = c( 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5 ), label = c( "IXI-Guys", "IXI-HH", "IXI-IOP", "MMRR", "NKI", "OASIS" ) )
?cut
site <- cut( as.numeric( resultsCombined$SITE ), breaks = c( 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5 ), label = c( "IXI-Guys", "IXI-HH", "IXI-IOP", "MMRR", "NKI", "OASIS" ) )
site
source( "ageThicknessPlots.R")
source( "ageThicknessPlots.R")
source( "ageThicknessPlots.R")
site
source( "ageThicknessPlots.R")
source( "ageThicknessPlots.R")
source( "ageThicknessPlots.R")
source( "ageThicknessPlots.R")
source( "ageThicknessPlots.R")
source( "ageThicknessPlots.R")
ls
source( "ageThicknessPlots.R")
source( "ageDistribution.R")
source( "ageDistribution.R")
source( "ageDistribution.R")
source( "ageDistribution.R")
source( "ageDistribution.R")
source( "ageDistribution.R")
source( "ageDistribution.R")
source( "ageDistribution.R")
?scale_fill_manual
source( "ageDistribution.R")
source( "ageDistribution.R")
source( "ageDistribution.R")
myPlot <- ggplot( data = plotData, aes( x = Age, fill = Site ) ) +
geom_histogram() +
scale_x_continuous( "Age (years)", breaks = seq( 10, 90, by = 10 ), labels = seq( 10, 90, by = 10 ), limits = c( 10, 90 ) ) +
scale_y_discrete( "Count" ) +
geom_bar( position = "dodge" ) +
#              scale_colour_manual( values = c( male_color, female_color ), breaks = c( 1, 2 ), labels = c( "Male", "Female" ) ) +
scale_fill_manual( values = 1:6, breaks = 1:6, label = c( "IXI-Guys", "IXI-HH", "IXI-IOP", "MMRR", "NKI", "OASIS" ) ) +
#                theme( legend.justification = c( 0, 0 ), legend.position = c( 0, 0 ) ) +
ggtitle( paste( "Age distribution by site", sep = "" ) )
ggsave( filename = paste0( "ageDistribution.pdf" ), plot = myPlot, width = 8, height = 6, units = 'in' )
source( "ageDistribution.R")
source( "ageDistribution.R")
source( "ageDistribution.R")
source( "ageDistribution.R")
source( "ageDistribution.R")
source( "ageDistribution.R")
source( "ageDistribution.R")
source( "ageDistribution.R")
scale_fill_hue()
?scale_fill_hue()
?scale_fill_hue( 1:6 )
scale_fill_hue( 1:6 )
hcl(h=seq(15, 375-360/n, length=n)%%360, c=100, l=65)
hcl(h=seq(15, 375-360/n, length=6)%%360, c=100, l=65)
source( "ageDistribution.R")
source( "ageDistribution.R")
source( "ageDistribution.R")
plotData
source( "ageDistribution.R")
source( "ageDistribution.R")
source( "ageDistribution.R")
source( "ageDistribution.R")
source( "ageDistribution.R")
source( "ageDistribution.R")
source( "ageDistribution.R")
source( "ageDistribution.R")
resultsCombined
colnames( resultsCombined )
nrow( resultsCombined)
resultsCombined <- resultsCombined[which( resultsCombined$AGE >= 20 ) && which( resultsCombined$AGE <= 80 ),]
nrow( resultsCombined)
resultsCombined <- resultsCombined[which( resultsCombined$AGE >= 20 ) & which( resultsCombined$AGE <= 80 ),]
resultsCombined <- resultsCombined[which( resultsCombined$AGE >= 20 ) & which( resultsCombined$AGE <= 80 ),]
whichPipeline <- 'ANTs'
resultsIXI <- read.csv( paste0( 'labelresults', whichPipeline, 'I.csv' ) )
resultsKirby <- read.csv( paste0( 'labelresults', whichPipeline, 'K.csv' ) )
resultsNKI <- read.csv( paste0( 'labelresults', whichPipeline, 'N.csv' ) )
resultsOasis <- read.csv( paste0( 'labelresults', whichPipeline, 'O.csv' ) )
resultsCombined <- rbind( resultsIXI, resultsKirby, resultsNKI, resultsOasis )
resultsCombined$SITE <- as.factor( resultsCombined$SITE )
resultsCombined$SEX <- as.factor( resultsCombined$SEX )
resultsCombined <- resultsCombined[which( resultsCombined$AGE >= 20 & resultsCombined$AGE <= 80 ),]
nrow( resultsCombined)
resultsCombined$AGE
min( resultsCombined$AGE )
max( resultsCombined$AGE )
source( "agePrediction2.R")
source( "agePrediction2.R")
source( "agePrediction2.R")
source( "repeatabilityBoxPlot.R")
boxPlotDataFrame
colnames( repeatabilityDataFrame)
colnames( boxPlotLeftDataFrame)
boxPlotLeftDataFrame
colnames( boxPlotLeftDataFrame)
source( "repeatabilityBoxPlot.R")
repeatabilityError
mean( repeatabilityError )
mean( repeatabilityError[,] )
mean( as.matrix( repeatabilityError ) )
source( "repeatabilityBoxPlot.R")
source( "repeatabilityBoxPlot.R")
source( "repeatabilityBoxPlot.R")
source( "repeatabilityBoxPlot.R")
source( "repeatabilityBoxPlot.R")
source( "repeatabilityBoxPlot.R")
source( "agePrediction2.R")
source( "agePrediction2.R")
source( "agePrediction2.R")
source( "agePrediction2.R")
source( "agePrediction2.R")
source( "agePrediction2.R")
cat( "Mean FS rmse = ", mean( resultsData$RMSE[which( resultsData$Pipeline == 'FreeSurfer' )], na.rm = TRUE ), "\n", sep = '' );
cat( "Mean ANTs rmse = ", mean( resultsData$RMSE[which( resultsData$Pipeline == 'ANTs' )], na.rm = TRUE ), "\n", sep = '' );
cat( "Mean FS rmse = ", mean( resultsData$RMSE[which( resultsData$Pipeline == 'FreeSurfer' )], na.rm = TRUE ), "\n", sep = '' );
cat( "Mean ANTs rmse = ", mean( resultsData$RMSE[which( resultsData$Pipeline == 'ANTs' )], na.rm = TRUE ), "\n", sep = '' );
resultsData
source( "agePrediction2.R")
cat( "Mean FS rmse = ", mean( resultsData$RMSE[which( resultsData$Pipeline == 'FreeSurfer' )], na.rm = TRUE ), "\n", sep = '' );
cat( "Mean ANTs rmse = ", mean( resultsData$RMSE[which( resultsData$Pipeline == 'ANTs' )], na.rm = TRUE ), "\n", sep = '' );
source( "agePrediction2.R")
warnings()
source( "agePrediction2.R")
warnings
warnings()
source( "agePrediction2.R")
source( "agePrediction2.R")
source( "agePrediction2.R")
corticalLabels
trainingData
source( "agePrediction2.R")
source( "agePrediction2.R")
source( "agePrediction2.R")
source( "agePrediction2.R")
source( "agePrediction2.R")
regionalQuadraticTerms <- paste0( "I(", corticalLabels, collapse = "^2) * SEX + " )
regionalQuadraticTerms
source( "agePrediction2.R")
myFormula
myFormula <- as.formula( paste( "AGE ~ SEX + ", regionalTerms, " + ", regionalQuadraticTerms, " + VOLUME ", sep = '' ) )
I(right.rostral.middle.frontal^2) * SEX
regionalTerms <- paste( corticalLabels, collapse = " * SEX + " )
regionalQuadraticTerms <- paste( "I(", corticalLabels, collapse = "^2) * SEX + " )
myFormula <- as.formula( paste( "AGE ~ SEX + ", regionalTerms, " + ", regionalQuadraticTerms, " + VOLUME ", sep = '' ) )
regionalQuadraticTerms <- paste( "I(", corticalLabels, collapse = "^2) * SEX + " )
regionalQuadraticTerms
regionalQuadraticTerms
source( "agePrediction2.R")
regionalQuadraticTerms
source( "agePrediction2.R")
source( "agePrediction2.R")
source( "agePrediction2.R")
source( "ageThicknessPlots.R")
source( "ageThicknessPlots.R")
source( "agePrediction2.R")
source( "ageThicknessPlots.R")
source( "ageThicknessPlots.R")
source( "agePrediction.R")
forestImp[[1]]
forestImp[[2]]
forestImp[[2]][1,]
forestImp[[2]][2]
for( i in 1:length( forestImp[[1]] ) )
{
cat( rownames( forestImp[[1]] )[i], forestImp[[1]][i], , forestImp[[2]][i], "\n", collapse = ',' )
}
for( i in 1:length( forestImp[[1]] ) )
{
cat( rownames( forestImp[[1]] )[i], forestImp[[1]][i], forestImp[[2]][i], "\n", collapse = ',' )
}
for( i in 1:length( forestImp[[1]] ) )
{
cat( rownames( forestImp[[1]] )[i], forestImp[[1]][i], forestImp[[2]][i],  sep = ',' )
cat( "\n" )
}
max( forestImp[[1]])
max( forestImp[[2]])
?createDataPartition
source( "agePrediction2.R")
whichPipeline
resultsOasis <- read.csv( paste0( 'labelresults', whichPipeline, 'O.csv' ) )
resultsCombined <- rbind( resultsOasis )
#       resultsCombined <- rbind( resultsIXI, resultsKirby, resultsNKI, resultsOasis )
resultsCombined$SITE <- as.factor( resultsCombined$SITE )
resultsCombined$SEX <- as.factor( resultsCombined$SEX )
resultsCombined <- resultsCombined[which( resultsCombined$AGE >= 20 & resultsCombined$AGE <= 80 ),]
corticalLabels <- tail( colnames( resultsCombined ), n = 62 )
drops <- c( "ID", "SITE" )
resultsCombined <- resultsCombined[, !( names( resultsCombined ) %in% drops )]
trainingIndices <- createDataPartition( resultsCombined$SEX, p = trainingPortion, list = FALSE, times = 1 )
trainingData <- resultsCombined[trainingIndices,]
testingData <- resultsCombined[-trainingIndices,]
trainingData
trainingData$SEX
trainingData$AGE
regionalTerms <- paste( corticalLabels, collapse = " * SEX + " )
myFormula <- as.formula( paste( "AGE ~ SEX + ", regionalTerms, " + VOLUME ", sep = '' ) )
myFormula
brainAgeLM <- lm( myFormula, data = trainingData, na.action = na.omit )
brainAgeLM
predictedAge <- predict( brainAgeLM, testingData )
predictedAge
regionalTerms <- paste( corticalLabels, collapse = " + " )
myFormula <- as.formula( paste( "AGE ~ SEX + ", regionalTerms, " + VOLUME ", sep = '' ) )
myFormula
brainAgeLM <- lm( myFormula, data = trainingData, na.action = na.omit )
predictedAge <- predict( brainAgeLM, testingData )
predictedAge
source( "agePrediction2.R")
source( "agePrediction2.R")
source( "agePrediction2.R")
myFormula
resultsCombined$AGE
source( "agePrediction2.R")
rmsePlot <- ggplot( resultsData, aes( x = RMSE, fill = Pipeline ) ) +
scale_y_continuous( "Density" ) +
scale_x_continuous( "RMSE", limits = c( 9, 14.5 ) ) +
geom_density( alpha = 0.5 )
ggsave( filename = paste( "~/Desktop/lmRmse", p, ".pdf", sep = "" ), plot = rmsePlot, width = 6, height = 6, units = 'in' )
rmsePlot <- ggplot( resultsData, aes( x = RMSE, fill = Pipeline ) ) +
scale_y_continuous( "Density" ) +
scale_x_continuous( "RMSE", limits = c( 9, 13. ) ) +
geom_density( alpha = 0.5 )
ggsave( filename = paste( "~/Desktop/lmRmse", p, ".pdf", sep = "" ), plot = rmsePlot, width = 6, height = 6, units = 'in' )
rmsePlot <- ggplot( resultsData, aes( x = RMSE, fill = Pipeline ) ) +
scale_y_continuous( "Density" ) +
scale_x_continuous( "RMSE", limits = c( 9, 14. ) ) +
geom_density( alpha = 0.5 )
ggsave( filename = paste( "~/Desktop/lmRmse", p, ".pdf", sep = "" ), plot = rmsePlot, width = 6, height = 6, units = 'in' )
cat( "Mean FS rmse = ", mean( resultsData$RMSE[which( resultsData$Pipeline == 'FreeSurfer' )], na.rm = TRUE ), "\n", sep = '' );
cat( "Mean ANTs rmse = ", mean( resultsData$RMSE[which( resultsData$Pipeline == 'ANTs' )], na.rm = TRUE ), "\n", sep = '' );
source( "agePrediction2.R")
source( "genderPrediction.R")
325000/12
for( n in 1:2 )
{
#     forestImp[[n]] <- forestImp[[n]] / nPermutations
forestImp.df <- data.frame( Statistic = names( forestImp[[n]][,1] ), Importance = as.numeric( forestImp[[n]][,1] )  )
forestImp.df <- forestImp.df[order( forestImp.df$Importance ),]
forestImp.df$Statistic <- factor( x = forestImp.df$Statistic, levels = forestImp.df$Statistic )
vPlot <- ggplot( data = forestImp.df, aes( x = Importance, y = Statistic ) ) +
geom_point( aes( color = Importance ) ) +
ylab( "" ) +
scale_x_continuous( "MeanDecreaseAccuracy", limits = c( 0, 16 ) ) +
scale_color_continuous( low = "navyblue", high = "darkred" ) +
theme( axis.text.y = element_text( size = 5 ) ) +
theme( plot.margin = unit( c( 0.1, 0.1, 0.1, -0.5 ), "cm" ) ) +
theme( axis.title = element_text( size = 10 ) ) +
theme( legend.position = "none" )
ggsave( file = paste( "~/Desktop/importance", thicknessTypes[n], p, ".pdf", sep = "" ), plot = vPlot, width = 4, height = 8 )
}
for( n in 1:2 )
{
#     forestImp[[n]] <- forestImp[[n]] / nPermutations
forestImp.df <- data.frame( Statistic = names( forestImp[[n]][,1] ), Importance = as.numeric( forestImp[[n]][,1] )  )
forestImp.df <- forestImp.df[order( forestImp.df$Importance ),]
forestImp.df$Statistic <- factor( x = forestImp.df$Statistic, levels = forestImp.df$Statistic )
vPlot <- ggplot( data = forestImp.df, aes( x = Importance, y = Statistic ) ) +
geom_point( aes( color = Importance ) ) +
ylab( "" ) +
scale_x_continuous( "MeanDecreaseAccuracy", limits = c( 0, 16 ) ) +
scale_color_continuous( low = "navyblue", high = "darkred" ) +
theme( axis.text.y = element_text( size = 8 ) ) +
theme( plot.margin = unit( c( 0.1, 0.1, 0.1, -0.5 ), "cm" ) ) +
theme( axis.title = element_text( size = 10 ) ) +
theme( legend.position = "none" )
ggsave( file = paste( "~/Desktop/importance", thicknessTypes[n], p, ".pdf", sep = "" ), plot = vPlot, width = 4, height = 8 )
}
forestImp.df$Statistic
t <- forestImp.df$Statistic
t
levels( t )
levels( t )[2] <- "Gender"
levels( t )
t
which( levels( t ) == "Gender" )
for( n in 1:2 )
{
#     forestImp[[n]] <- forestImp[[n]] / nPermutations
forestImp.df <- data.frame( Statistic = names( forestImp[[n]][,1] ), Importance = as.numeric( forestImp[[n]][,1] )  )
forestImp.df <- forestImp.df[order( forestImp.df$Importance ),]
newLevels <- levels( forestImp.df$Statistic )
newLevels[which( newLevels == "SEX" )] <- "Gender"
newLevels[which( newLevels == "VOLUME" )] <- "Volume"
forestImp.df$Statistic <- factor( x = forestImp.df$Statistic, levels = newLevels )
vPlot <- ggplot( data = forestImp.df, aes( x = Importance, y = Statistic ) ) +
geom_point( aes( color = Importance ) ) +
ylab( "" ) +
scale_x_continuous( "MeanDecreaseAccuracy", limits = c( 0, 16 ) ) +
scale_color_continuous( low = "navyblue", high = "darkred" ) +
theme( axis.text.y = element_text( size = 8 ) ) +
theme( plot.margin = unit( c( 0.1, 0.1, 0.1, -0.5 ), "cm" ) ) +
theme( axis.title = element_text( size = 10 ) ) +
theme( legend.position = "none" )
ggsave( file = paste( "~/Desktop/importance", thicknessTypes[n], p, ".pdf", sep = "" ), plot = vPlot, width = 4, height = 8 )
}
newLevels <- levels( forestImp.df$Statistic )
newLevels
for( n in 1:2 )
{
#     forestImp[[n]] <- forestImp[[n]] / nPermutations
forestImp.df <- data.frame( Statistic = names( forestImp[[n]][,1] ), Importance = as.numeric( forestImp[[n]][,1] )  )
forestImp.df <- forestImp.df[order( forestImp.df$Importance ),]
newLevels <- levels( forestImp.df$Statistic )
#     newLevels[which( newLevels == "SEX" )] <- "Gender"
#     newLevels[which( newLevels == "VOLUME" )] <- "Volume"
forestImp.df$Statistic <- factor( x = forestImp.df$Statistic, levels = newLevels )
vPlot <- ggplot( data = forestImp.df, aes( x = Importance, y = Statistic ) ) +
geom_point( aes( color = Importance ) ) +
ylab( "" ) +
scale_x_continuous( "MeanDecreaseAccuracy", limits = c( 0, 16 ) ) +
scale_color_continuous( low = "navyblue", high = "darkred" ) +
theme( axis.text.y = element_text( size = 8 ) ) +
theme( plot.margin = unit( c( 0.1, 0.1, 0.1, -0.5 ), "cm" ) ) +
theme( axis.title = element_text( size = 10 ) ) +
theme( legend.position = "none" )
ggsave( file = paste( "~/Desktop/importance", thicknessTypes[n], p, ".pdf", sep = "" ), plot = vPlot, width = 4, height = 8 )
}
for( n in 1:2 )
{
#     forestImp[[n]] <- forestImp[[n]] / nPermutations
forestImp.df <- data.frame( Statistic = names( forestImp[[n]][,1] ), Importance = as.numeric( forestImp[[n]][,1] )  )
forestImp.df <- forestImp.df[order( forestImp.df$Importance ),]
forestImp.df$Statistic <- factor( x = forestImp.df$Statistic, levels = forestImp.df$Statistic )
vPlot <- ggplot( data = forestImp.df, aes( x = Importance, y = Statistic ) ) +
geom_point( aes( color = Importance ) ) +
ylab( "" ) +
scale_x_continuous( "MeanDecreaseAccuracy", limits = c( 0, 16 ) ) +
scale_color_continuous( low = "navyblue", high = "darkred" ) +
theme( axis.text.y = element_text( size = 8 ) ) +
theme( plot.margin = unit( c( 0.1, 0.1, 0.1, -0.5 ), "cm" ) ) +
theme( axis.title = element_text( size = 10 ) ) +
theme( legend.position = "none" )
ggsave( file = paste( "~/Desktop/importance", thicknessTypes[n], p, ".pdf", sep = "" ), plot = vPlot, width = 4, height = 8 )
}
levels( forestImp.df$Statistic )[which( levels( forestImp.df$Statistic ) == 'Sex' )]
levels( forestImp.df$Statistic )[which( levels( forestImp.df$Statistic ) == 'SEX' )]
levels( forestImp.df$Statistic )[which( levels( forestImp.df$Statistic ) == 'SEX' )]
for( n in 1:2 )
{
#     forestImp[[n]] <- forestImp[[n]] / nPermutations
forestImp.df <- data.frame( Statistic = names( forestImp[[n]][,1] ), Importance = as.numeric( forestImp[[n]][,1] )  )
forestImp.df <- forestImp.df[order( forestImp.df$Importance ),]
forestImp.df$Statistic <- factor( x = forestImp.df$Statistic, levels = forestImp.df$Statistic )
levels( forestImp.df$Statistic )[which( levels( forestImp.df$Statistic ) == 'SEX' )] <- 'Gender'
levels( forestImp.df$Statistic )[which( levels( forestImp.df$Statistic ) == 'VOLUME' )] <- 'Volume'
vPlot <- ggplot( data = forestImp.df, aes( x = Importance, y = Statistic ) ) +
geom_point( aes( color = Importance ) ) +
ylab( "" ) +
scale_x_continuous( "MeanDecreaseAccuracy", limits = c( 0, 16 ) ) +
scale_color_continuous( low = "navyblue", high = "darkred" ) +
theme( axis.text.y = element_text( size = 8 ) ) +
theme( plot.margin = unit( c( 0.1, 0.1, 0.1, -0.5 ), "cm" ) ) +
theme( axis.title = element_text( size = 10 ) ) +
theme( legend.position = "none" )
ggsave( file = paste( "~/Desktop/importance", thicknessTypes[n], p, ".pdf", sep = "" ), plot = vPlot, width = 4, height = 8 )
}
for( n in 1:2 )
{
#     forestImp[[n]] <- forestImp[[n]] / nPermutations
forestImp.df <- data.frame( Statistic = names( forestImp[[n]][,1] ), Importance = as.numeric( forestImp[[n]][,1] )  )
forestImp.df <- forestImp.df[order( forestImp.df$Importance ),]
forestImp.df$Statistic <- factor( x = forestImp.df$Statistic, levels = forestImp.df$Statistic )
levels( forestImp.df$Statistic )[which( levels( forestImp.df$Statistic ) == 'SEX' )] <- 'Gender'
levels( forestImp.df$Statistic )[which( levels( forestImp.df$Statistic ) == 'VOLUME' )] <- 'Volume'
vPlot <- ggplot( data = forestImp.df, aes( x = Importance, y = Statistic ) ) +
geom_point( aes( color = Importance ) ) +
ylab( "" ) +
scale_x_continuous( "MeanDecreaseAccuracy", limits = c( 0, 16 ) ) +
scale_color_continuous( low = "navyblue", high = "darkred" ) +
theme( axis.text.y = element_text( size = 8 ) ) +
theme( plot.margin = unit( c( 0.1, 0.1, 0.1, -0.5 ), "cm" ) ) +
theme( axis.title = element_text( size = 10 ) ) +
theme( legend.position = "none" )
ggsave( file = paste( "~/Desktop/importance", thicknessTypes[n], p, ".pdf", sep = "" ), plot = vPlot, width = 3, height = 8 )
}
for( n in 1:2 )
{
#     forestImp[[n]] <- forestImp[[n]] / nPermutations
forestImp.df <- data.frame( Statistic = names( forestImp[[n]][,1] ), Importance = as.numeric( forestImp[[n]][,1] )  )
forestImp.df <- forestImp.df[order( forestImp.df$Importance ),]
forestImp.df$Statistic <- factor( x = forestImp.df$Statistic, levels = forestImp.df$Statistic )
levels( forestImp.df$Statistic )[which( levels( forestImp.df$Statistic ) == 'SEX' )] <- 'Gender'
levels( forestImp.df$Statistic )[which( levels( forestImp.df$Statistic ) == 'VOLUME' )] <- 'Volume'
vPlot <- ggplot( data = forestImp.df, aes( x = Importance, y = Statistic ) ) +
geom_point( aes( color = Importance ) ) +
ylab( "" ) +
scale_x_continuous( "MeanDecreaseAccuracy", limits = c( 0, 16 ) ) +
scale_color_continuous( low = "navyblue", high = "darkred" ) +
theme( axis.text.y = element_text( size = 8 ) ) +
theme( plot.margin = unit( c( 0.1, 0.1, 0.1, -0.5 ), "cm" ) ) +
theme( axis.title = element_text( size = 9 ) ) +
theme( legend.position = "none" )
ggsave( file = paste( "~/Desktop/importance", thicknessTypes[n], p, ".pdf", sep = "" ), plot = vPlot, width = 3, height = 8 )
}
forestImp.df
forestImp
forestImpCombined <- forestImp[[1]] + forestImp[[2]]
forestImpCombined
forestImp.df <- data.frame( Statistic = names( forestImpCombined[,1] ), Importance = as.numeric( forestImpCombined[,2] ) )
forestImp.df <- data.frame( Statistic = names( forestImpCombined[,1] ), Importance = as.numeric( forestImpCombined[,1] ) )
forestImp.df <- forestImp.df[order( forestImp.df$Importance ),]
forestImp.df$Statistic <- factor( x = forestImp.df$Statistic, levels = forestImp.df$Statistic )
levels( forestImp.df$Statistic )[which( levels( forestImp.df$Statistic ) == 'SEX' )] <- 'Gender'
levels( forestImp.df$Statistic )[which( levels( forestImp.df$Statistic ) == 'VOLUME' )] <- 'Volume'
vPlot <- ggplot( data = forestImp.df, aes( x = Importance, y = Statistic ) ) +
geom_point( aes( color = Importance ) ) +
ylab( "" ) +
scale_x_continuous( "MeanDecreaseAccuracy", limits = c( 0, 16 ) ) +
scale_color_continuous( low = "navyblue", high = "darkred" ) +
theme( axis.text.y = element_text( size = 8 ) ) +
theme( plot.margin = unit( c( 0.1, 0.1, 0.1, -0.5 ), "cm" ) ) +
theme( axis.title = element_text( size = 9 ) ) +
theme( legend.position = "none" )
ggsave( file = paste( "~/Desktop/importanceCombined", thicknessTypes[n], p, ".pdf", sep = "" ), plot = vPlot, width = 3, height = 8 )
forestImp.df <- data.frame( Statistic = names( forestImpCombined[,1] ), Importance = as.numeric( forestImpCombined[,1]/2 ) )
forestImp.df <- forestImp.df[order( forestImp.df$Importance ),]
forestImp.df$Statistic <- factor( x = forestImp.df$Statistic, levels = forestImp.df$Statistic )
levels( forestImp.df$Statistic )[which( levels( forestImp.df$Statistic ) == 'SEX' )] <- 'Gender'
levels( forestImp.df$Statistic )[which( levels( forestImp.df$Statistic ) == 'VOLUME' )] <- 'Volume'
vPlot <- ggplot( data = forestImp.df, aes( x = Importance, y = Statistic ) ) +
geom_point( aes( color = Importance ) ) +
ylab( "" ) +
scale_x_continuous( "MeanDecreaseAccuracy", limits = c( 0, 16 ) ) +
scale_color_continuous( low = "navyblue", high = "darkred" ) +
theme( axis.text.y = element_text( size = 8 ) ) +
theme( plot.margin = unit( c( 0.1, 0.1, 0.1, -0.5 ), "cm" ) ) +
theme( axis.title = element_text( size = 9 ) ) +
theme( legend.position = "none" )
ggsave( file = paste( "~/Desktop/importanceCombined", thicknessTypes[n], p, ".pdf", sep = "" ), plot = vPlot, width = 3, height = 8 )
